
  <script>
  function sortTableName(n) {
    var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
    table = document.getElementById("ParticipationTable");
    switching = true;
    // Set the sorting direction to ascending:
    dir = "asc";    
    addArrow(n + 1, true);
    /* Make a loop that will continue until
    no switching has been done: */
    while (switching) {
      // Start by saying: no switching is done:
      switching = false;
      rows = table.rows;
      /* Loop through all table rows (except the
      first, which contains table headers): */
      for (i = 1; i < (rows.length - 1); i++) {
        // Start by saying there should be no switching:
        shouldSwitch = false;
        /* Get the two elements you want to compare,
        one from current row and one from the next: */
        x = rows[i].getElementsByTagName("TD")[n];
        y = rows[i + 1].getElementsByTagName("TD")[n];
        /* Check if the two rows should switch place,
        based on the direction, asc or desc: */
        if (dir == "asc") {          
          if (x.innerHTML.localeCompare(y.innerHTML) == 1) {
            shouldSwitch = true;
            break;
          }
        } else if (dir == "desc") {
          if (x.innerHTML.localeCompare(y.innerHTML) == -1) {
            shouldSwitch = true;
            break;
          }
        }
      }
      if (shouldSwitch) {
        /* If a switch has been marked, make the switch
        and mark that a switch has been done: */
        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
        switching = true;
        // Each time a switch is done, increase this count by 1:
        switchcount ++;
      } else {
        
        /* If no switching has been done AND the direction is "asc",
        set the direction to "desc" and run the while loop again. */
        if (switchcount == 0 && dir == "asc") {
          dir = "desc";
          switching = true;
          addArrow(n + 1, false);          
        }
      }
    }
  }


  function addArrow(colID, isUp) {
    var header;

    document.getElementById("col1").innerHTML = "Member";
    document.getElementById("col2").innerHTML = "Approved Service Hours";
    document.getElementById("col3").innerHTML = "Unapproved Service Hours";
    document.getElementById("col4").innerHTML = "Attendance Percentage";
    document.getElementById("col5").innerHTML = "Missed Mandatory Events";
    if (colID == 1)
      {
        if (isUp)
          {
            document.getElementById("col1").innerHTML = "Member ⇧";
          }
        else
          {
            document.getElementById("col1").innerHTML = "Member ⇩";
          }
        
      }
    else if (colID == 2)
      {
        if (isUp)
          {
            document.getElementById("col2").innerHTML = "Approved Service Hours ⇧";
          }
        else
          {
            document.getElementById("col2").innerHTML = "Approved Service Hours ⇩";
          }

      }
    else if (colID == 3)
      {
        if (isUp)
          {
            document.getElementById("col3").innerHTML = "Unapproved Service Hours ⇧";
          }
        else
          {
            document.getElementById("col3").innerHTML = "Unapproved Service Hours ⇩";
          }

      }
    else if (colID == 4)
      {
        if (isUp)
          {
            document.getElementById("col4").innerHTML = "Attendance Percentage ⇧";
          }
        else
          {
            document.getElementById("col4").innerHTML = "Attendance Percentage ⇩";
          }

      }
    else if (colID == 5)
      {
        if (isUp)
          {
            document.getElementById("col5").innerHTML = "Missed Mandatory Events ⇧";
          }
        else
          {
            document.getElementById("col5").innerHTML = "Missed Mandatory Events ⇩";
          }

      }

  }

  function sortTable(n) {
    var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
    table = document.getElementById("ParticipationTable");
    switching = true;
    // Set the sorting direction to ascending:
    dir = "asc";
    addArrow(n + 1, true);
    /* Make a loop that will continue until
    no switching has been done: */
    while (switching) {
      // Start by saying: no switching is done:
      switching = false;
      rows = table.rows;
      /* Loop through all table rows (except the
      first, which contains table headers): */
      for (i = 1; i < (rows.length - 1); i++) {
        // Start by saying there should be no switching:
        shouldSwitch = false;
        /* Get the two elements you want to compare,
        one from current row and one from the next: */
        x = rows[i].getElementsByTagName("TD")[n];
        y = rows[i + 1].getElementsByTagName("TD")[n];
        /* Check if the two rows should switch place,
        based on the direction, asc or desc: */
        if (dir == "asc") {
          if (Number(x.innerHTML) > Number(y.innerHTML)) {
            shouldSwitch = true;
            break;
          }
        } else if (dir == "desc") {
          if (Number(x.innerHTML) < Number(y.innerHTML)) {
            shouldSwitch = true;
            break;
          }
        }
      }
      if (shouldSwitch) {
        /* If a switch has been marked, make the switch
        and mark that a switch has been done: */
        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
        switching = true;
        // Each time a switch is done, increase this count by 1:
        switchcount ++;
      } else {
        /* If no switching has been done AND the direction is "asc",
        set the direction to "desc" and run the while loop again. */
        if (switchcount == 0 && dir == "asc") {
          dir = "desc";
          switching = true;
          addArrow(n + 1, false);
        }
      }
    }
  }
  </script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Archivo+Black&family=Montserrat:wght@500&display=swap');

    h1{
      font-family: 'Archivo Black', sans-serif;
      margin: 5rem auto;
    }

    p{
      font-weight: 500;
    }

    th{
      text-align: center;
      
    }

    td{
      font-family: 'Montesserat', sans-serif;
    }

    /* .blink {
      animation: blinkingText 1.5s infinite;
      color: red;
      font-family: Montserrat;
      font-weight: 700;
      margin: 0 auto;
      padding-top: 1rem;
      text-align: center;
      width: 50%;
    }

    @keyframes blinkingText{
      0%{     color: red;    }
      25%{    color: rgb(255, 90, 90); }
      50%{    color: rgb(255, 180, 180); }
      75%{    color: rgb(255, 90, 90); }
      100%{   color: red; }
    } */

    .container{
      font-family: 'Montserrat', sans-serif;
      margin: 10rem auto;
      text-align: center;
    }

    .col.left{
      margin-right: 3rem;
    }

    .col.right{
      margin-left: 3rem;
    }
    @media (max-width: 1000px) {
      .col.left{
        margin-right: 0rem;
      }
  
      .col.right{
        margin-left: 0rem;
      }

      h1{
      
      font-size: 8vw;
    }
    th{
      
      font-size: 2.2vw;
    }
    tr{
      font-size: 2vw;
    }
    
  }
    
    
  </style>
    <% content_for(:html_title) { 'Points Tracker' } %>

    <!-- <%= link_to("Home", {controller: "home", action: "index"}) %> -->
    <br/>

    <div class="mt-5 container home index">
    <h2 class="center">Welcome to Admin View, <%= current_member.name%></h2><br>
    <h3 class="center">UID (For Dev Use): <%= current_member.uid%></h3>
      <table id="ParticipationTable" class="table table-striped">
        <h1>Member Participation:</h1>
          <tr>
            <th id="col1" style="cursor:pointer" onclick="sortTableName(0)">Member</th>
            <th id="col2" style="cursor:pointer" onclick="sortTable(1)">Approved Service Hours</th>
            <th id="col3" style="cursor:pointer" onclick="sortTable(2)">Unapproved Service Hours</th>
            <th id="col4" style="cursor:pointer" onclick="sortTable(3)">Attendance Percentage</th>
            <th id="col5" style="cursor:pointer" onclick="sortTable(4)">Missed Mandatory Events</th>
            <th></th>
          </tr>
          <% @members.where(isAdmin: false).each do |member| %>
            <tr>
              <td><%= member.name %></td>
              <td><%= @service_hours.where(member_id: member.id, isApproved: true,).sum(:hours) %></td>
              <td><%= @service_hours.where(member_id: member.id, isApproved: false).sum(:hours) %></td>
              <% if @event_num > 0 %>
                <td><%= 100*member.events.where('datetime < ?', Time.now).length / @event_num %></td>
              <% else %>
                <td><%= 100 %></td>
              <% end %>
              <td><%= @mandatory_event_num - member.events.where(isMandatory: true).where('datetime < ?', Time.now).length %></td>
              <td><%= link_to("Details", member_path(member), :class => 'action show') %></td>
            </tr>
          <% end %>
      </table>
    </div>
